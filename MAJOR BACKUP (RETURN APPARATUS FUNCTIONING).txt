      //Issue Return Button
      private void btnIssueReturn_Click(object sender, EventArgs e)
      {
          try
          {
              // Check if the return date is valid
              DateTime returnDate = dtpReturnDate.Value;
              DateTime borrowDate = DateTime.Parse(date_borrowed);
              DateTime dueDate = DateTime.Parse(due_date);

              if (returnDate < borrowDate)
              {
                  MessageBox.Show("The return date cannot be earlier than the borrow date.", "Invalid Date", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                  return;
              }
              else if (returnDate > dueDate)
              {
                  tbRemarks.Text = "This is a late return and is subjected as a violation. \nContext: Late Item Return\nPenalty: Student cannot borrow any apparatuses for 1 week.";
              }



              // Check if the return date is valid
              if (dtpReturnDate.Value < DateTime.Today)
              {
                  MessageBox.Show("The return date cannot be earlier than today.", "Invalid Date", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                  return;
              }

              // Check if the quantity returned is valid
              int returnedQuantity = (int)numQuantityReturned.Value;
              int borrowedQuantity = 0; // Initialize quantity borrowed

              using (SqlConnection con = new SqlConnection("data source = LAPTOP-4KSPM38V; database = LabManagSys; integrated security=True"))
              {
                  con.Open();

                  using (SqlCommand cmd = new SqlCommand("SELECT Quantity FROM BorrowReturnTransaction WHERE transactionID = @TransactionID", con))
                  {
                      cmd.Parameters.AddWithValue("@TransactionID", rowid);
                      using (SqlDataReader reader = cmd.ExecuteReader())
                      {
                          if (reader.Read())
                          {
                              borrowedQuantity = Convert.ToInt32(reader["Quantity"]);
                          }
                          else
                          {
                              MessageBox.Show("Error retrieving apparatus information.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                              return;
                          }
                      }
                  }

                  if (returnedQuantity < 1 || returnedQuantity > borrowedQuantity)
                  {
                      MessageBox.Show("Invalid quantity returned. Please enter a value between 1 and " + borrowedQuantity.ToString() + ".", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                      return;
                  }
              }
              // Check if the remarks field is empty
              if (string.IsNullOrWhiteSpace(tbRemarks.Text))
              {
                  if (MessageBox.Show("Are you sure you don't need to place the Transaction remarks?\n" + "The system will automate a generic report comment instead.", "Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                  {
                      // Proceed with the insertion without remarks
                      tbRemarks.Text = "No remarks provided";
                      tbRemarks.Text += "\nReturned Quantity: " + returnedQuantity.ToString();
                  }
                  else
                  {
                      // Cancel the insertion and focus on the tbRemarks field
                      tbRemarks.Focus();
                      return;
                  }
              }

              string returnDateStr = dtpReturnDate.Text;

              using (SqlConnection con = new SqlConnection("data source = LAPTOP-4KSPM38V; database = LabManagSys; integrated security=True"))
              {
                  con.Open();

                  // Retrieve the apparatus name and other date values
                  string apparatusName;
                  string borrowedDateStr;
                  string dueDateStr;
                  string dateReturnedStr = returnDateStr; // Initialize with return date
                  int quantityBorrowed = 0; // Initialize quantity borrowed


                  using (SqlCommand cmd = new SqlCommand("SELECT Apparatus_Name, Borrow_Date, Due_Date, Quantity FROM BorrowReturnTransaction WHERE transactionID = @TransactionID", con))
                  {
                      cmd.Parameters.AddWithValue("@TransactionID", rowid);
                      using (SqlDataReader reader = cmd.ExecuteReader())
                      {
                          if (reader.Read())
                          {
                              apparatusName = reader["Apparatus_Name"].ToString();
                              borrowedDateStr = reader["Borrow_Date"].ToString();
                              dueDateStr = reader["Due_Date"].ToString();
                              quantityBorrowed = Convert.ToInt32(reader["Quantity"]);
                          }
                          else
                          {
                              MessageBox.Show("Error retrieving apparatus information.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                              return;
                          }
                      }
                  }

               

                  // Get the quantity returned from the NumericUpDown control
                  int quantityReturned = (int)numQuantityReturned.Value;

                  // Validate quantity returned
                  if (quantityReturned < 1 || quantityReturned > quantityBorrowed)
                  {
                      MessageBox.Show("Invalid quantity returned. Please enter a value between 1 and " + quantityBorrowed.ToString() + ".", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                      return;
                  }

                  if (string.IsNullOrWhiteSpace(tbRemarks.Text) || tbRemarks.Text == "")
                  {
                      if (MessageBox.Show("Are you sure you don't need to place the Transaction remarks?\n" + "The system will automate a generic report comment instead.", "Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                      {
                          // Proceed with the insertion without remarks
                          tbRemarks.Text = "No remarks provided";
                          tbRemarks.Text += "\nReturned Quantity: " + quantityReturned.ToString();
                      }
                      else
                      {
                          // Cancel the insertion and focus on the tbRemarks field
                          tbRemarks.Focus();
                          return;
                      }
                  }

                  // Update BorrowReturnTransaction with return date, remarks, and quantity returned
                  using (SqlCommand cmd = new SqlCommand("UPDATE BorrowReturnTransaction SET Date_Returned = @ReturnDate, Remarks = @Remarks, Quantity_Returned = @QuantityReturned, AccountID = @AccountID WHERE transactionID = @TransactionID", con))
                  {
                      // Pass the correct parameters to the command
                      cmd.Parameters.AddWithValue("@ReturnDate", dtpReturnDate.Value);
                      cmd.Parameters.AddWithValue("@Remarks", tbRemarks.Text);
                      cmd.Parameters.AddWithValue("@TransactionID", rowid);
                      cmd.Parameters.AddWithValue("@QuantityReturned", numQuantityReturned.Value);
                      cmd.Parameters.AddWithValue("@AccountID", Form1.Session.AccountID);

                      // Execute the query
                      cmd.ExecuteNonQuery();
                  }

                  // Update the quantity stock in the ApparatusList table
                  using (SqlCommand cmd = new SqlCommand("UPDATE Inventory SET Quantity = Quantity + @QuantityReturned WHERE [Apparatus Name] = @ApparatusName", con))
                  {
                      cmd.Parameters.AddWithValue("@ApparatusName", apparatusName);
                      cmd.Parameters.AddWithValue("@QuantityReturned", quantityReturned);
                      cmd.ExecuteNonQuery();
                  }

                  // Update remarks to include information about the returned quantity
                  //tbRemarks.Text += "\nReturned Quantity: " + quantityReturned.ToString();

                  MessageBox.Show("The transaction has been completed.\nThank you for returning the Apparatus!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                  ReturnApparatus_Load(this, null);
                  ResetFields();
              }
          }
          catch (Exception ex)
          {
              MessageBox.Show("An error occurred while processing the return transaction.\n" + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
          }
      }